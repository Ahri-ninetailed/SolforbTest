@model Order
@inject Database.SolforbDbContext DbContext
@{
    ViewData["Title"] = "Заказ";
    Provider provider = await DbContext.GetProviderByIdAsync(Model.ProviderId);
}
<style>
    .form-text {
        color: red;
    }
</style>
<div class="row">
    <h4>Заказ:</h4>
    <div class="row">
        <div class="col-3">
            Id: @Model.Id
        </div>
        <div class="col-3">
            Prodiver: @provider.Name
        </div>
        <div class="col-3">
            Number: @Model.Number
        </div>
        <div class="col-3">
            Date: @Model.Date

        </div>
    </div>
    <div class="row">
        <h4>Элементы заказа</h4>
        <form id="ItemsForm" asp-action="Save" asp-controller="Create" asp-route-providerId="@Model.ProviderId" asp-route-number="@Model.Number" method="post">
            <div class="elementsOfOrder">
                @for (int i = 0; i < Model.OrderItems.Count(); i++)
                {
                    <div class="elementOrder ms-5 row">
                        <div class="col-3 mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" value="@Guid.NewGuid()" asp-for=@Model.OrderItems[i].Name>
                            <div class="form-text">@ViewData[$"NameError{i}"]</div>
                        </div>
                        <div class="col-3 mb-3">
                            <label class="form-label">Quantity</label>
                            <input type="number" step="any" value="1" class="form-control" asp-for="@Model.OrderItems[i].Quantity">
                            <div class="form-text">@ViewData[$"QuantityError{i}"]</div>
                        </div>
                        <div class="col-3 mb-3">
                            <label class="form-label">Unit</label>
                            <input type="text" class="form-control" asp-for="@Model.OrderItems[i].Unit">
                            <div class="form-text">@ViewData[$"UnitError{i}"]</div>
                        </div>
                        @if (i > 0)
                        {
                            <div class="col-3" style="margin-top: 32px;">
                                <a class="btn btn-danger">Удалить</a>
                            </div>
                        }

                    </div>
                }
            </div>
            <button class="btn btn-success" type="submit">
                Сохранить
            </button>
            <button id="AddItem" class="btn btn-success" type="submit">
                Добавить элемент
            </button>
        </form>
    </div>
</div>
<script src="~/lib/jquery/jquery.min.js"></script>
<script>
    function submitStudent() {
        var data = $("#ItemsForm").serialize();

        let id= @Model.Id.ToString();
        id = "?Id=" + id + "&";
        let url = "/Create/AddItem"+id 
        alert(url)
        $.ajax({
            type: 'POST',
            url: url,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {
                alert('Successfully received Data ');
                console.log(result);
            },
            error: function () {
                alert('Failed to receive the Data');
                console.log('Failed ');
            }
        })
    }
    $("#AddItem").click(function (event) {
        event.preventDefault();
        submitStudent();
    });
</script>
